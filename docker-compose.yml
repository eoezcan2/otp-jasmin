version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - monitoring_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - jasmin
    deploy:
      resources:
        limits:
          cpus: "${PROMETHEUS_CPU}"
          memory: ${PROMETHEUS_MEM}
    security_opt:
      - no-new-privileges:true

  grafana:
    image: grafana/grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./dashboards:/opt/grafana-dashboards:ro
      - monitoring_data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: "${GRAFANA_CPU}"
          memory: ${GRAFANA_MEM}
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:alpine
    restart: unless-stopped
    healthcheck:
      test: redis-cli ping | grep PONG
    deploy:
      resources:
        limits:
          cpus: "${REDIS_CPU}"
          memory: ${REDIS_MEM}
    security_opt:
      - no-new-privileges:true

  rabbit-mq:
    image: rabbitmq:3.10-management-alpine
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
    deploy:
      resources:
        limits:
          cpus: "${RABBITMQ_CPU}"
          memory: ${RABBITMQ_MEM}
    security_opt:
      - no-new-privileges:true

  jasmin:
    image: jookies/jasmin:latest
    restart: unless-stopped
    ports:
      - "${JASMIN_SMS_PORT}:2775"
      - "${JASMIN_DASHBOARD_PORT}:8990"
      - "${JASMIN_HTTP_API_PORT}:1401"
    depends_on:
      redis:
        condition: service_healthy
      rabbit-mq:
        condition: service_healthy
    environment:
      REDIS_CLIENT_HOST: redis
      AMQP_BROKER_HOST: rabbit-mq
    deploy:
      resources:
        limits:
          cpus: "${JASMIN_CPU}"
          memory: ${JASMIN_MEM}
    security_opt:
      - no-new-privileges:true

  jasmin_web:
    image: tarekaec/jasmin_web_panel:1.2
    ports:
      - "${JASMIN_WEB_PORT}:8000"
    deploy:
      replicas: 1
      update_config:
        order: start-first
    env_file:
      - .env
    environment:
      DEBUG: "${DEBUG}"
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
      PRODB_URL: "${PRODB_URL}"
      REDIS_URI: "${REDIS_URI}"
      TELNET_HOST: "${TELNET_HOST}"
      SUBMIT_LOG: "${SUBMIT_LOG}"
    volumes:
      - web_public:/app/public
      - web_logs:/app/logs
    depends_on:
      - redis

  jasmin_postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

volumes:
  pg_data:
  web_public:
  web_logs:
  monitoring_data:

networks:
  smpp-network:
    driver: bridge
